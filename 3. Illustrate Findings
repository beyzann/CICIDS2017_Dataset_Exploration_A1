# To illustrate findings we start by visualizing the distribution of benign and malicious network traffic in the CICIDS2017 dataset. 
# This will help us understand the balance between the classes.

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
dataset = pd.read_csv('CICIDS2017.csv')

# Plot class distribution
plt.figure(figsize=(6, 4))
sns.countplot(data=dataset, x='Label')
plt.title('Class Distribution')
plt.xlabel('Class')
plt.ylabel('Count')
plt.show()


#We can generate summary statistics to get a sense of the numeric features in the dataset:
 
# Display summary statistics for numeric features
numeric_summary = dataset.describe()
print(numeric_summary)


# Visualize the distribution of specific numeric features we are using histograms. 

# Plot histograms for selected numeric features
numeric_features = ['Flow Duration', 'Total Fwd Packets', 'Total Backward Packets']
for feature in numeric_features:
    plt.figure(figsize=(12, 6))
    sns.histplot(dataset[feature], kde=True)
    plt.title(f'Distribution of {feature}')
    plt.xlabel(feature)
    plt.show()



# To explore correlations between numeric features, create a heatmap.
 

# Calculate correlation matrix
correlation_matrix = dataset.corr()

# Plot a heatmap of correlations
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()


# For categorical features, with the searches which made for displayed value counts to understand the distribution of categories.
  

# Display value counts for a categorical feature
categorical_feature = 'Protocol'
value_counts = dataset[categorical_feature].value_counts()
print(value_counts)


# To examine the spread and distribution of data for different classes (benign and malicious), create box plots.
  

# Box plot of a specific feature by class
feature_name = 'Flow Duration'
plt.figure(figsize=(10, 6))
sns.boxplot(data=dataset, x='Label', y=feature_name)
plt.title(f'Box Plot of {feature_name} by Class')
plt.xlabel('Class')
plt.ylabel(feature_name)
plt.show()




